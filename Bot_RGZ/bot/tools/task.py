import requests
import json

import numpy as np
from .database import *


# В данном участке кода происходят следующие действия:
#
# import requests: Импорт модуля requests, который позволяет отправлять HTTP-запросы и получать ответы.
#
# import json: Импорт модуля json, который предоставляет функциональность для работы с данными в формате JSON.
#
# import numpy as np: Импорт модуля numpy с псевдонимом np. numpy - это библиотека для работы с многомерными
# массивами и математическими функциями.
#
# from .database import *: Импорт всех объектов из модуля database. Этот импорт может содержать определения классов,
# функций или переменных, связанных с базой данных или обработкой данных.
#
# Общий смысл этого участка кода заключается в импорте необходимых модулей и объектов для работы с HTTP-запросами,
# обработки данных в формате JSON, выполнения математических операций с использованием numpy и доступа к базе данных.
#




def get_daily_closing_prices(symbol):
    try:
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&apikey={'OVNNX0FLXSSXLEWB'}"
        response = requests.get(url)
        data = response.json()
        time_series = data["Time Series (Daily)"]
        closing_prices = [float(entry["4. close"]) for entry in time_series.values()]  #
        median_price = np.median(closing_prices)
        return median_price
    except KeyError:
        return None



# Эта функция get_daily_closing_prices(symbol) получает ежедневные закрытия цен для указанной ценной бумаги.
#
# Вот пошаговое объяснение кода:
#
# Формируется URL-адрес для отправки запроса к API.
# В URL включается символ ценной бумаги и API-ключ для доступа к сервису.
# Отправляется GET-запрос по указанному URL-адресу с использованием модуля requests.
# Ответ на запрос сохраняется в переменной response.
# Полученный ответ преобразуется в формат JSON с помощью метода response.json(). Результат сохраняется в переменной data.
# Извлекается словарь "Time Series (Daily)" из данных data, содержащий информацию о временных рядах с ежедневными значениями цен.
# Создается список closing_prices, в котором хранятся значения закрытия цен, полученные из словаря "Time Series (Daily)".
# Значения преобразуются в тип float.
# Вычисляется медианная цена median_price на основе списка closing_prices с помощью функции np.median() из библиотеки numpy.
# Возвращается значение median_price - медианной цены закрытия. Если происходит исключение KeyError, возвращается значение None.
# Функция позволяет получать медианную цену закрытия для указанного символа ценной бумаги с использованием внешнего API.


async def start_calculate():
    mas = get_len_security()
    for i in range(0, len(mas)):
        prise = get_daily_closing_prices(mas[i])
        if prise != None:
            set_add_security(mas[i],prise)
        else:
            set_security_disable(mas[i])

# Эта асинхронная функция start_calculate() используется для запуска процесса расчета и обновления данных о ценных бумагах.
#
# Получается список mas с помощью вызова функции get_len_security().
# Этот список содержит имена ценных бумаг, для которых нужно получить и обновить данные.
#
# Выполняется цикл for для каждого элемента в списке mas.
#
# Для каждой ценной бумаги выполняется вызов функции get_daily_closing_prices(mas[i]), чтобы получить медианную цену закрытия.
#
# Если полученная цена prise не равна None, то вызывается функция set_add_security(mas[i], prise),
# которая добавляет или обновляет данные о ценной бумаге в базе данных.
#
# Если полученная цена prise равна None, то вызывается функция set_security_disable(mas[i]), которая отключает ценную бумагу в базе данных.
#
# Таким образом, функция start_calculate() итерируется по списку ценных бумаг,
# получает их текущие медианные цены закрытия и обновляет данные в базе данных, в зависимости от полученных значений.




